SRC_WORD = "-14"

PROGRAMM = [
	"e -> .", # конец программы
	"+$0)#[0] -> 00000000", # исключительная ситуация - введен 0
	"00000000 -> 00000000e",
	"$0<#[ -> +$0)#[", # переход из 1 части во 2
	"$-0<#[ -> -$0)#[", # переход из 2 части в 3 
	# декрементирование числа a
	"9<# -> 8>#",
	"8<# -> 7>#",
	"7<# -> 6>#",
	"6<# -> 5>#",
	"5<# -> 4>#",
	"4<# -> 3>#",
	"3<# -> 2>#",
	"2<# -> 1>#",
	"1<# -> 0>#",
	"0<# -> ^<9#",
	"$-1^< -> $>-",
	">- -> ->",
	"$1^< -> $>",
	"9^< -> 8>",
	"8^< -> 7>",
	"7^< -> 6>",
	"6^< -> 5>",
	"5^< -> 4>",
	"4^< -> 3>",
	"3^< -> 2>",
	"2^< -> 1>",
	"1^< -> 0>",
	"0^< -> ^<9",
	">#[ -> #>[",
	"#>[ -> #[>",
	"0>] -> 1<]",
	# инкрементирование числа b
	">#[ -> #[>",
	"[1*< -> [*<0",
	"[*<0 -> [<10",
	">0] -> <1]",
	">1] -> *<0]",
	"0*< -> <1",
	"1*< -> *<0",
	">1] -> <10]",
	# переход в конец слова a
	" < -> >",
	">< -> >",
	">0 -> 0>",
	">0 -> 0>",
	">1 -> 1>",
	">2 -> 2>",
	">3 -> 3>",
	">4 -> 4>",
	">5 -> 5>",
	">6 -> 6>",
	">7 -> 7>",
	">8 -> 8>",
	">9 -> 9>",
	# переход из конца слова b
	"1< -> <1",
	"0< -> <0",
	"#[< -> <#[",
	">0] -> <0]",
	# запись числа b справа, которое будет в итоге двоичным,
	"0> -> 0<#[0]",
	"1> -> 1<#[0]",
	"2> -> 2<#[0]",
	"3> -> 3<#[0]",
	"4> -> 4<#[0]",
	"5> -> 5<#[0]",
	"6> -> 6<#[0]",
	"7> -> 7<#[0]",
	"8> -> 8<#[0]",
	"9> -> 9<#[0]",
	# ---достраивание числа, вторая часть---
	"0)#[ -> 0#[),",
	# увеличение счетчика
	"$0( -> $1)",
	"$1( -> $2)",
	"$2( -> $3)",
	"$3( -> $4)",
	"$4( -> $5)",
	"$5( -> $6)",
	"$6( -> $7)",
	"$7( -> $8)",
	# счетчик
	")#[ -> #[)",
	")1 -> 1)",
	")0 -> 0)",
	"),1 -> (1,",
	"),0 -> (0,",
	"1( -> (1",
	"0( -> (0",
	"#[( -> (#[",
	"),] -> a]",
	# --- дописавание нулей, третья часть ---
	# уменьшение счетчика
	"$0a -> $8}",
	"$1a -> $7}",
	"$2a -> $6}",
	"$3a -> $5}",
	"$4a -> $4}",
	"$5a -> $3}",
	"$6a -> $2}",
	"$7a -> $1}",
	# перемещение a
	"1a -> a1",
	"0a -> a0",
	"#[a -> a#[",
	# достраивание нулей
	"8}#[ -> 0b#[00000000",
	"7}#[ -> 0b#[0000000",
	"6}#[ -> 0b#[000000",
	"5}#[ -> 0b#[00000",
	"4}#[ -> 0b#[0000",
	"3}#[ -> 0b#[000",
	"2}#[ -> 0b#[00",
	"1}#[ -> 0b#[0",
	"}1 -> }01",
	# --- четвертая часть, дополнительный код ---
	"+$0b -> $0+b",
	"-$0b -> $0-b",
	"+b#[0 -> #[0+b",
	"-b#[0 -> #[1-b",
	# инвертируем значение, если число отрицательное
	"-b0 -> 1-b",
	"-b1 -> 0-b",
	"-b] -> c]",
	# иначе - завершаем
	"$0#[0+b -> +b",
	"+b1 -> 1+b",
	"+b0 -> 0+b",
	"+b] -> e",
	# прибавили единицу и вызвали сборщик мусора
	"0c] -> 1k]", 
	"1c] -> *0",
	"1* -> *0",
	"0* -> 1k",
	# концовка, очистка мусора
	"$0#[k -> e",
	"k] -> k",
	"0k -> k0", # переносим сборщик мусора в начало
	"1k -> k1",
	"- -> $->", # запись коретки в начале слова
	" -> $>", # запись коретки в начале слова
]

STEPS_LIMIT = 10000


def NAM_interpreter(programmSource: list, word: str) -> str:
	programm = [i.split(" -> ") for i in programmSource]

	for i in range(STEPS_LIMIT):
		for find, replacer in programm:
			if find not in word:
				continue 

			print(word, find, replacer, sep=" ; ")
			word = word.replace(find, replacer.replace(".", ""), 1)

			if replacer[0] == ".":
				return word

			break
		else:
			return word

	return "Опаньки... Марков не отвечает"


print(NAM_interpreter(PROGRAMM, SRC_WORD))